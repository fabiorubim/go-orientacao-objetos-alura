package main

import "fmt"

type ContaCorrente struct {
	titular       string
	numeroAgencia int
	numeroConta   int
	saldo         float64
}

func main() {
	// var contaDoFabio ContaCorrente = ContaCorrente{}
	// contaDoFabio := ContaCorrente{titular: "Fabio", numeroAgencia: 555, numeroConta: 321654, saldo: 233.56}
	contaDoFabio := ContaCorrente{"Fabio", 555, 321654, 233.56}
	fmt.Println(contaDoFabio)

	var contaDaCris *ContaCorrente
	contaDaCris = new(ContaCorrente)
	contaDaCris.titular = "Cris"
	contaDaCris.saldo = 55.10
	// fmt.Println(contaDaCris)
	fmt.Println(*contaDaCris)

	//Go compara o conteúdo, de forma nativa, como se fosse o equals() do Java sobreescrito para utilizar os campos de uma classe
	contaDoFabioRubim := ContaCorrente{"Fabio", 555, 321654, 233.56}
	contaDoFabioBiasi := ContaCorrente{"Fabio", 555, 321654, 233.56}
	fmt.Println("O conteúdo dessas contas são iguais?", contaDoFabioBiasi == contaDoFabioRubim)

	contaDoFabioBiasiRubim := ContaCorrente{"Fabio", 555, 987654, 233.56}
	contaDoFabioMelloBiasi := ContaCorrente{"Fabio", 555, 321654, 233.56}
	fmt.Println("O conteúdo dessas contas são iguais?", contaDoFabioBiasiRubim == contaDoFabioMelloBiasi)

	var contaDaCris2 *ContaCorrente
	contaDaCris2 = new(ContaCorrente)
	contaDaCris2.titular = "Cris"
	contaDaCris2.saldo = 55.10

	var contaDaCris3 *ContaCorrente
	contaDaCris3 = new(ContaCorrente)
	contaDaCris3.titular = "Cris"
	contaDaCris3.saldo = 55.10
	//Comparando endereços retornará FALSE
	fmt.Println("(Endereço)Contas iguais?", contaDaCris2 == contaDaCris3)

	//Comparando endereços retornará FALSE
	fmt.Println("(Endereço)Contas iguais?", &contaDaCris2 == &contaDaCris3)

	//Comparando conteúdos retornará TRUE
	fmt.Println("(Conteúdo)Contas iguais?", *contaDaCris2 == *contaDaCris3)

}

// Go Zero-Initialization
// bool false
// int 0
// float 0
// string ""
// struct {}
//Ponteiro nulo = nil

// package main

// import (
//     "fmt"
// )

// func main() {
//     a := nil
//     fmt.Println(a)
// }
// Não, não vai. O compilador imprimirá o seguinte erro: use of untyped nil, que significa uso não tipado do nil.

// Aqui estamos tentando atribuir um valor nil apontando para algum lugar sem fornecer seu tipo e esperamos que o compilador deduza isso. O compilador não sabe se esta variável é um inteiro, uma string, um array ou uma structure.

// Nil com um tipo definido
// package main

// import (
//     "fmt"
// )

// func main() {
//     var s *string = nil
//     fmt.Println(s)
// }
//Neste caso, o programa compila e retorna <nil> como esperado.

//Não é possível comparar valores com tipos diferentes em Go.
// package main

// import (
//     "fmt"
// )

// func main() {
//     var f float64
//     var i int

//     fmt.Println(f==i)
// }

// Recebemos uma mensagem com um erro informando que os tipos são incompatíveis. Não podemos comparar o valor atribuído pela inicialização zero se temos tipos diferentes. Portanto, por mais que o Go garanta a inicialização zero de diferentes tipos, devemos ficar atentos com os tipos que estamos trabalhando.
